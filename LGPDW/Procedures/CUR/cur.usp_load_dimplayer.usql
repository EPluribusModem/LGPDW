//--------------------------------------------------------------------------------------
// Name: LG_DW_Nissan.cur.usp_load_dimplayer
// Desc:
// Auth: Juli Lisser
// Date: 2018-12-11
//------------------------
// Change History
//------------------------
// PR   Date             Author                     Description 
// --   --------         -------                    ------------------------------------
// 1    2018-12-11       lisser			             Created
//--------------------------------------------------------------------------------------
DROP PROCEDURE IF EXISTS cur.usp_load_dimplayer;
CREATE PROCEDURE cur.usp_load_dimplayer()
AS
BEGIN
    DECLARE @OUT string = "/datalake/c_cur/LG_DM_LGP/dim_player.csv";
    @QUERY_DISTINCT_PLAYERS =
        SELECT id.ToLower() AS data_id,
               data_playerDetailData_playerDetail_name AS data_name,
               data_deviceAdministrationData_decomissioned AS data_decomissioned,
               source_FolderFile,
               load_date,
               ROW_NUMBER() OVER(PARTITION BY
               id.ToLower(),
               data_playerDetailData_playerDetail_name,
               data_deviceAdministrationData_decomissioned,
               source_FolderFile
               ORDER BY load_date DESC) AS rn_truerecords
        FROM LG_DW_LGP.std.mstr_players;

    @Players =
        SELECT *
        FROM @QUERY_DISTINCT_PLAYERS
        WHERE rn_truerecords == 1;

    @Players2 =
        SELECT *,
               ROW_NUMBER() OVER(PARTITION BY data_id ORDER BY load_date DESC) AS rn_changes
        FROM @Players;

    @PlayersMaxDate =
        SELECT data_id,
               MAX(load_date) AS maxloaddate
        FROM @Players2
        GROUP BY data_id;

    @PlayersMinDate =
        SELECT data_id,
               MIN(load_date) AS minloaddate
        FROM @Players2
        GROUP BY data_id;

    @Defaults =
        SELECT *
        FROM(
            VALUES
            (
                - 1,
                "n/a",
                "n/a",
                1,
                0,
                DateTime.Parse("2000-01-01"),
                DateTime.Parse("2000-01-01"),
                DateTime.Parse("2999-12-31"),
                1
            ),
            (
                - 2,
                "unknown",
                "unknown",
                1,
                0,
                DateTime.Parse("2000-01-01"),
                DateTime.Parse("2000-01-01"),
                DateTime.Parse("2999-12-31"),
                1
            ),
            (
                - 3,
                "invalid",
                "invalid",
                1,
                0,
                DateTime.Parse("2000-01-01"),
                DateTime.Parse("2000-01-01"),
                DateTime.Parse("2999-12-31"),
                1
            )
			) AS T(player_Key,
				   playerGuid,
				   name,
				   isActive,
				   isReportable,
				   createdTimestamp,
				   insertedTimestamp,
				   expiredTimestamp,
				   isActiveRecord);

    @Players3 =
        SELECT ROW_NUMBER() OVER() AS player_Key,
               p2.data_id AS playerGuid,
               p2.data_name AS name,
               (p2.data_decomissioned == "False") ? 1 : 0 AS isActive,
               (p2.data_decomissioned == "False") ? 1 : 0 AS isReportable,
               pmd.minloaddate AS createdTimestamp,
               p2.load_date AS insertedTimestamp,
               (p2.rn_changes == 1) ? DateTime.Parse("2999-12-31") : p2.load_date AS expiredTimestamp,
               (pxd.maxloaddate == p2.load_date) ? 1 : 0 AS isActiveRecord
        FROM @Players2 AS p2
             INNER JOIN
                 @PlayersMinDate AS pmd
             ON p2.data_id == pmd.data_id
             INNER JOIN
                 @PlayersMaxDate AS pxd
             ON p2.data_id == pxd.data_id
        UNION ALL
        SELECT (long?) player_Key AS player_Key,
               playerGuid,
               name,
               isActive,
               isReportable,
               (DateTime?) createdTimestamp AS createdTimestamp,
               insertedTimestamp,
               expiredTimestamp,
               isActiveRecord
        FROM @Defaults;

    DROP TABLE IF EXISTS LG_DM_LGP.cur.dim_player;
    CREATE TABLE IF NOT EXISTS LG_DM_LGP.cur.dim_player
    (
        INDEX clx_playerGuid
        CLUSTERED(playerGuid ASC)
        DISTRIBUTED BY
        HASH(playerGuid)
    )
	AS
    SELECT *
    FROM @Players3;

    OUTPUT @Players3
    TO @OUT
    USING Outputters.Csv(outputHeader : true, quoting : true);
	END;
					 