//--------------------------------------------------------------------------------------
// Name: LG_DW_Nissan.cur.usp_load_dimprogramversion
// Desc:
// Auth: Juli Lisser
// Date: 2018-12-11
//------------------------
// Change History
//------------------------
// PR   Date             Author                     Description 
// --   --------         -------                    ------------------------------------
// 1    2018-12-11       lisser			             Created
//--------------------------------------------------------------------------------------
//DROP PROCEDURE IF EXISTS cur.usp_load_dimprogramversion;
//CREATE PROCEDURE cur.usp_load_dimprogramversion()
//AS
//BEGIN
    DECLARE @OUT string = "/datalake/c_cur/LG_DM_LGP/dim_programversion.csv";
    @QUERY_DISTINCT_PROGRAMVERSIONS =
        SELECT id.ToLower() AS data_id,
               data_channels_live,
               source_FolderFile,
               load_date,
               ROW_NUMBER() OVER(PARTITION BY
               id.ToLower(),
               data_channels_live,
               source_FolderFile
               ORDER BY load_date DESC) AS rn_truerecords
        FROM LG_DW_LGP.std.mstr_programversions;

    @Programversions =
        SELECT *
        FROM @QUERY_DISTINCT_PROGRAMVERSIONS
        WHERE rn_truerecords == 1;

    @Programversions2 =
        SELECT *,
               ROW_NUMBER() OVER(PARTITION BY data_id ORDER BY load_date DESC) AS rn_changes
        FROM @Programversions;

    @ProgramversionsMaxDate =
        SELECT data_id,
               MAX(load_date) AS maxloaddate
        FROM @Programversions2
        GROUP BY data_id;

    @ProgramversionsMinDate =
        SELECT data_id,
               MIN(load_date) AS minloaddate
        FROM @Programversions2
        GROUP BY data_id;

    @Defaults =
        SELECT *
        FROM(
            VALUES
            (
                - 1,
                "n/a",
                "n/a",
                1,
                0,
                DateTime.Parse("2000-01-01"),
                DateTime.Parse("2000-01-01"),
                DateTime.Parse("2999-12-31"),
                1
            ),
            (
                - 2,
                "unknown",
                "unknown",
                1,
                0,
                DateTime.Parse("2000-01-01"),
                DateTime.Parse("2000-01-01"),
                DateTime.Parse("2999-12-31"),
                1
            ),
            (
                - 3,
                "invalid",
                "invalid",
                1,
                0,
                DateTime.Parse("2000-01-01"),
                DateTime.Parse("2000-01-01"),
                DateTime.Parse("2999-12-31"),
                1
            )
			  ) AS T(programversion_Key,
						name,
						version,
						isActive,
						isReportable,
						createdTimestamp,
						insertedTimestamp,
						expiredTimestamp,
						isActiveRecord);

    @Programversions3 =
        SELECT ROW_NUMBER() OVER() AS programversion_Key,
               p2.data_id AS name,
               p2.data_channels_live AS version,
               1 AS isActive,
               1 AS isReportable,
               pmd.minloaddate AS createdTimestamp,
               p2.load_date AS insertedTimestamp,
               (p2.rn_changes == 1) ? DateTime.Parse("2999-12-31") : p2.load_date AS expiredTimestamp,
               (pxd.maxloaddate == p2.load_date) ? 1 : 0 AS isActiveRecord
        FROM @Programversions2 AS p2
             INNER JOIN
                 @ProgramversionsMinDate AS pmd
             ON p2.data_id == pmd.data_id
             INNER JOIN
                 @ProgramversionsMaxDate AS pxd
             ON p2.data_id == pxd.data_id
        UNION ALL
        SELECT (long?) programversion_Key AS programversion_Key,
               name,
               version,
               isActive,
               isReportable,
               (DateTime?) createdTimestamp AS createdTimestamp,
               insertedTimestamp,
               expiredTimestamp,
               isActiveRecord
        FROM @Defaults;

    DROP TABLE IF EXISTS LG_DM_LGP.cur.dim_programversion;
    CREATE TABLE IF NOT EXISTS LG_DM_LGP.cur.dim_programversion
    (
        INDEX clx_name
        CLUSTERED(name ASC)
        DISTRIBUTED BY
        HASH(name)
    )
	AS
    SELECT *
    FROM @Programversions3;

    OUTPUT @Programversions3
    TO @OUT
    USING Outputters.Csv(outputHeader : true, quoting : true);
//	END;