//--------------------------------------------------------------------------------------
// Name: LG_DW_Nissan.cur.usp_load_dimlocation
// Desc:
// Auth: Juli Lisser
// Date: 2018-12-06
//------------------------
// Change History
//------------------------
// PR   Date             Author                     Description 
// --   --------         -------                    ------------------------------------
// 1    2018-12-06       lisser			             Created
//--------------------------------------------------------------------------------------
DROP PROCEDURE IF EXISTS cur.usp_load_dimlocation;
CREATE PROCEDURE cur.usp_load_dimlocation()
AS
BEGIN
	DECLARE @OUT string = "/datalake/c_cur/LG_DM_LGP/dim_location.csv";
	@QUERY_DISTINCT_LOCATIONS = 
		SELECT id.ToLower() AS data_id,
			   data_rkmslocationid,
			   data_rkmsclientid,
			   data_rkmsclientname,
			   data_onyxid,
			   data_bac,
			   data_dealercode,
			   data_name,
			   data_address1,
			   data_city,
			   data_state,
			   data_zipcode,
			   data_country,
			   data_active,
			   data_reportable,
			   source_FolderFile,
			   load_date,
			   ROW_NUMBER() OVER(PARTITION BY
									id.ToLower(),
									data_rkmslocationid,
									data_rkmsclientid,
									data_rkmsclientname,
									data_onyxid,
									data_bac,
									data_dealercode,
									data_name,
									data_address1,
									data_city,
									data_state,
									data_zipcode,
									data_country,
									data_active,
									data_reportable,
									source_FolderFile
									ORDER BY load_date DESC) AS rn_truerecords
		FROM LG_DW_LGP.std.mstr_locations;
	
	@Locations = 
		SELECT *
		FROM @QUERY_DISTINCT_LOCATIONS
		WHERE rn_truerecords == 1;
	
	@Locations2 = 
		SELECT *,
			   ROW_NUMBER() OVER(PARTITION BY data_id ORDER BY load_date DESC) AS rn_changes
		FROM @Locations;
	
	@LocationsMaxDate =
		SELECT data_id,
			   MAX(load_date) AS maxloaddate
		FROM @Locations2
		GROUP BY data_id;
	
	@LocationsMinDate = 
		SELECT data_id,
			   MIN(load_date) AS minloaddate
			   FROM @Locations2
		GROUP BY data_id;
	
	@Defaults = 
		SELECT *
		FROM 
			(VALUES
			 (-1, "n/a", "n/a", "n/a", "n/a", "n/a", "n/a", "n/a", "n/a", "n/a", "n/a", "n/a", "n/a","n/a", 1, 0,DateTime.Parse("2000-01-01"), DateTime.Parse("2000-01-01"), DateTime.Parse("2999-12-31"), 1),
			 (-2, "unknown", "unknown", "unknown", "unknown", "unknown", "unknown", "unknown", "unknown", "unknown", "unknown","unknown", "unknown", "unknown", 1, 0,DateTime.Parse("2000-01-01"), DateTime.Parse("2000-01-01"), DateTime.Parse("2999-12-31"), 1),
			 (-3, "invalid", "invalid", "invalid", "invalid", "invalid", "invalid", "invalid", "invalid", "invalid","invalid", "invalid", "invalid", "invalid", 1, 0,DateTime.Parse("2000-01-01"), DateTime.Parse("2000-01-01"), DateTime.Parse("2999-12-31"), 1)
			 ) AS T(location_Key,
					locationGuid,
					rkmsLocationId,
					rkmsClientId,
					rkmsClientName,
					onyxId,
					bac,
					dealerCode,
					name,
					address1,
					city,
					state,
					zipcode,
					country,
					isActive,
					isReportable,
					createdTimestamp,
					insertedTimestamp,
					expiredTimestamp,
					isActiveRecord);
	
	@Locations3 = 
		SELECT ROW_NUMBER() OVER() AS location_Key,
			   l2.data_id AS locationGuid,
			   l2.data_rkmslocationid AS rkmsLocationId,
			   l2.data_rkmsclientid AS rkmsClientId,
			   l2.data_rkmsclientname AS rkmsClientName,
			   l2.data_onyxid AS onyxId,
			   l2.data_bac AS bac,
			   l2.data_dealercode AS dealerCode,
			   l2.data_name AS name,
			   l2.data_address1 AS address1,
			   l2.data_city AS city,
			   l2.data_state AS state,
			   l2.data_zipcode AS zipcode,
			   l2.data_country AS country,
			   (l2.data_active == "True") ? 1 : 0 AS isActive,
			   (l2.data_reportable == "True") ? 1 : 0 AS isReportable,
			   lmd.minloaddate AS createdTimestamp,
			   l2.load_date AS insertedTimestamp,
			   (l2.rn_changes == 1) ? DateTime.Parse("2999-12-31") : l2.load_date AS expiredTimestamp,
			   (lxd.maxloaddate == l2.load_date) ? 1 : 0 AS isActiveRecord
		FROM @Locations2 AS l2
			 INNER JOIN @LocationsMinDate AS lmd
			 ON l2.data_id == lmd.data_id
			 INNER JOIN @LocationsMaxDate AS lxd
			 ON l2.data_id == lxd.data_id
		UNION ALL
		SELECT 
			(long?)location_Key AS location_Key,
			locationGuid,
			rkmsLocationId,
			rkmsClientId,
			rkmsClientName,
			onyxId,
			bac,
			dealerCode,
			name,
			address1,
			city,
			state,
			zipcode,
			country,
			isActive,
			isReportable,
			(DateTime?)createdTimestamp AS createdTimestamp,
			insertedTimestamp,
			expiredTimestamp,
			isActiveRecord
		FROM @Defaults;
	
	DROP TABLE IF EXISTS LG_DM_LGP.cur.dim_location;
	CREATE TABLE IF NOT EXISTS LG_DM_LGP.cur.dim_location
	(
		INDEX clx_locationGuid
		CLUSTERED (locationGuid ASC)
		DISTRIBUTED BY HASH(locationGuid)
	)
	AS
	SELECT *
	FROM @Locations3;
	
	OUTPUT @Locations3
	TO @OUT
	USING Outputters.Csv(outputHeader : true, quoting : true);
	
	END;
			   
			
	   
	
	

	
	
